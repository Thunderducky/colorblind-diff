{"version":3,"sources":["DiffView.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["DiffView","diffText","files","parseDiff","map","oldRevision","newRevision","type","hunks","key","viewType","diffType","hunk","content","brightnessByColor","color","isHEX","indexOf","isRGB","m","hasFullSpec","length","substr","match","r","parseInt","g","b","console","log","App","useState","insertColor","setInsertColor","deleteColor","setDeleteColor","root","document","documentElement","colors","className","style","margin","width","height","overflow","display","marginLeft","lineHeight","backgroundColor","onChangeComplete","hex","setProperty","marginBottom","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.873dfcaa.chunk.js","sourcesContent":["import React from \"react\";\nimport {parseDiff, Diff, Hunk} from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\nconst example = `diff --git a/.gitignore b/.gitignore\nindex e69de29..d8f3372 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -0,0 +1,3 @@\n+node_modules\n+.DS_Store\n+.env\ndiff --git a/projectors/habitProjector.js b/projectors/habitProjector.js\nindex f068aaa..6ad9718 100644\n--- a/projectors/habitProjector.js\n+++ b/projectors/habitProjector.js\n@@ -1,9 +1,2 @@\n-// Two flows\n-    // Augment existing projection\n-    // Build Projection from scratch\n-\n-\n-// Update projection\n-// CreateProjection from scratch\n-// Creating the model will be from OUTSIDE this part\n+const moment = require(\"moment\");\n // TODO: Check in about timestamps\n@@ -14,4 +7,5 @@\n  */\n+\n const midnightsSinceLastCheckin = (newCheckin, prevCheckin) => {\n-    //\n+    return moment(newCheckin).diff(moment(prevCheckin).startOf(\"day\"), \"days\")\n }\n`\n\n\nconst DiffView = ({diffText}) => {\n    const files = parseDiff(example);\n\n    const renderFile = ({oldRevision, newRevision, type, hunks}) => (\n        <Diff key={oldRevision + '-' + newRevision} viewType=\"split\" diffType={type} hunks={hunks}>\n            {hunks => hunks.map(hunk => <Hunk key={hunk.content} hunk={hunk} />)}\n        </Diff>\n    );\n\n    return (\n        <div>\n            {files.map(renderFile)}\n        </div>\n    );\n};\n\nexport default DiffView","import React, { useState } from 'react';\nimport logo from './logo.svg';\n//import './App.css';\nimport DiffView from './DiffView';\nimport { GithubPicker, SketchPicker } from 'react-color';\n\nfunction brightnessByColor (color) {\n  var color = \"\" + color, isHEX = color.indexOf(\"#\") == 0, isRGB = color.indexOf(\"rgb\") == 0;\n  if (isHEX) {\n    const hasFullSpec = color.length == 7;\n    var m = color.substr(1).match(hasFullSpec ? /(\\S{2})/g : /(\\S{1})/g);\n    if (m) var r = parseInt(m[0] + (hasFullSpec ? '' : m[0]), 16), g = parseInt(m[1] + (hasFullSpec ? '' : m[1]), 16), b = parseInt(m[2] + (hasFullSpec ? '' : m[2]), 16);\n  }\n  if (isRGB) {\n    var m = color.match(/(\\d+){3}/g);\n    if (m) var r = m[0], g = m[1], b = m[2];\n  }\n  if (typeof r != \"undefined\") return ((r*299)+(g*587)+(b*114))/1000;\n}\n\nconsole.log(brightnessByColor(\"#FFFFFF\"));\nconsole.log(brightnessByColor(\"#000000\"));\n\nfunction App() {\n  // --diff-code-delete-background-color: \n  const [insertColor, setInsertColor] = useState(\"#eaffee\");\n  const [deleteColor, setDeleteColor] = useState(\"#fdeff0\");\n  const root = document.documentElement;\n  const handleChangeComplete = ({hex}) => {\n    setInsertColor(hex);\n    console.log(hex);\n    root.style.setProperty(\"--diff-code-insert-background-color\", hex)\n  };\n\n  const handleChangeComplete2 = ({hex}) => {\n    setDeleteColor(hex);\n    console.log(hex);\n    root.style.setProperty(\"--diff-code-delete-background-color\", hex)\n  };\n\n  // Build a context for editor colors, for now we'll just treat them as state up here\nconst colors = [\n  //'#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB', \n  '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB']\n  return (\n    <div className=\"App\">\n      \n      <div style={{ margin: \"auto\", width: \"80%\", height: \"600px\", overflow: \"auto\"}}>\n        <h1>Color controls</h1>\n        <div style={{display:\"flex\"}}>\n          <div style={{marginLeft: 20}}>\n            <div style={{display:\"flex\", lineHeight: \"30px\"}}><div className=\"box\" style={{backgroundColor: deleteColor}}></div>Delete Color</div>\n            <GithubPicker colors={colors} color={deleteColor} onChangeComplete={ handleChangeComplete2 }/>\n          </div>\n          <div style={{marginLeft: 20, height: 30}}>\n            <div style={{display:\"flex\", lineHeight: \"30px\", height:30, marginBottom: 10}}><div className=\"box\" style={{backgroundColor: insertColor}}></div>Insert Color</div>\n            <GithubPicker colors={colors} color={insertColor} onChangeComplete={ handleChangeComplete }/>\n          </div>\n          \n        </div>\n        <DiffView />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}